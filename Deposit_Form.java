/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UAS;

import java.awt.Color;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class Deposit_Form extends javax.swing.JFrame implements Deposit_Interface {

    /**
     * Creates new form Deposit_Form
     */
    @Override
    public void openDeposit() {
        System.out.println("Open Deposit Form");
    }

    Session ob = new Session();
    private DefaultTableModel tabmode;
    private ResultSet result;
    Deposit aa = new Deposit();
    Login bb = new Login();
    Session cc = new Session();
    private String[] cryptotype = {"Choose One ...", "Bitcoin", "Ethereum", "Ripple", "Bitcoin Cash", "Dashcoin", "Litecoin"};
    private double valueOfAmount;
    private double valueOfEstimate;

    public Deposit_Form() {
        if (Session.getLoginStatus() == "Active") {
            initComponents();
            setSessionName();
            seeDatabase();
        } else {
            dispose();
            Login_Form.preview();
        }
    }

    private void setSessionName() {
        Name.setText("Welcome " + Session.getName());
        Name.setBackground(Color.WHITE);
        Name.setOpaque(true);
    }

    public void setBTCWallet() {
        to.setText(Session.getBTCWallet());
    }

    public void setETHWallet() {
        to.setText(Session.getETHWallet());
    }

    public void setBCHWallet() {
        to.setText(Session.getBCHWallet());
    }

    public void setXRPWallet() {
        to.setText(Session.getXRPWallet());
    }

    public void setDASHWallet() {
        to.setText(Session.getDASHWallet());
    }

    public void setLTCWallet() {
        to.setText(Session.getLTCWallet());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tables = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        from = new javax.swing.JTextField();
        to = new javax.swing.JTextField();
        amount = new javax.swing.JTextField();
        estimate = new javax.swing.JTextField();
        saveData = new javax.swing.JButton();
        type = new javax.swing.JComboBox<>();
        resetText = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        Name = new javax.swing.JLabel();
        generate = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        txt_id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        withdraw = new javax.swing.JButton();
        menu = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(925, 510));
        setResizable(false);
        setSize(new java.awt.Dimension(925, 510));
        getContentPane().setLayout(null);

        tables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tables.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tables.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tables);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(460, 120, 453, 340);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Crypto Type");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 150, 83, 19);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Received From");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 200, 107, 19);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Send to");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 250, 54, 19);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Amount");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 300, 53, 19);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Estimate");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 350, 60, 19);

        from.setBackground(new java.awt.Color(255, 255, 255));
        from.setForeground(new java.awt.Color(0, 0, 0));
        getContentPane().add(from);
        from.setBounds(130, 190, 310, 31);

        to.setEditable(false);
        to.setBackground(new java.awt.Color(255, 255, 255));
        to.setForeground(new java.awt.Color(0, 0, 0));
        to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toActionPerformed(evt);
            }
        });
        getContentPane().add(to);
        to.setBounds(130, 240, 310, 30);

        amount.setBackground(new java.awt.Color(255, 255, 255));
        amount.setForeground(new java.awt.Color(0, 0, 0));
        amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountKeyReleased(evt);
            }
        });
        getContentPane().add(amount);
        amount.setBounds(130, 290, 310, 32);

        estimate.setBackground(new java.awt.Color(255, 255, 255));
        estimate.setForeground(new java.awt.Color(0, 0, 0));
        estimate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                estimateKeyReleased(evt);
            }
        });
        getContentPane().add(estimate);
        estimate.setBounds(130, 340, 310, 30);

        saveData.setBackground(new java.awt.Color(255, 255, 255));
        saveData.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        saveData.setForeground(new java.awt.Color(95, 145, 64));
        saveData.setText("Save");
        saveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataActionPerformed(evt);
            }
        });
        getContentPane().add(saveData);
        saveData.setBounds(10, 390, 125, 30);

        type.setBackground(new java.awt.Color(255, 255, 255));
        type.setForeground(new java.awt.Color(0, 0, 0));
        type.setModel(new javax.swing.DefaultComboBoxModel<>(cryptotype));
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });
        getContentPane().add(type);
        type.setBounds(130, 140, 310, 34);

        resetText.setBackground(new java.awt.Color(255, 255, 255));
        resetText.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        resetText.setForeground(new java.awt.Color(95, 145, 64));
        resetText.setText("Reset");
        resetText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTextActionPerformed(evt);
            }
        });
        getContentPane().add(resetText);
        resetText.setBounds(160, 390, 122, 30);

        logout.setBackground(new java.awt.Color(255, 255, 255));
        logout.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        logout.setForeground(new java.awt.Color(95, 145, 64));
        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        getContentPane().add(logout);
        logout.setBounds(300, 390, 140, 30);

        Name.setBackground(new java.awt.Color(255, 255, 255));
        Name.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        Name.setForeground(new java.awt.Color(95, 145, 64));
        Name.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Name.setText("Name");
        Name.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Name.setOpaque(true);
        getContentPane().add(Name);
        Name.setBounds(280, 0, 540, 65);

        generate.setBackground(new java.awt.Color(255, 255, 255));
        generate.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        generate.setForeground(new java.awt.Color(95, 145, 64));
        generate.setText("New Wallet");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });
        getContentPane().add(generate);
        generate.setBounds(10, 430, 125, 30);

        delete.setBackground(new java.awt.Color(255, 255, 255));
        delete.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        delete.setForeground(new java.awt.Color(95, 145, 64));
        delete.setText("Delete History");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        getContentPane().add(delete);
        delete.setBounds(160, 430, 122, 30);

        txt_id.setBackground(new java.awt.Color(255, 255, 255));
        txt_id.setForeground(new java.awt.Color(0, 0, 0));
        txt_id.setText("Generated Automatically");
        txt_id.setEditable(false);
        getContentPane().add(txt_id);
        txt_id.setBounds(130, 90, 310, 33);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Transaction ID");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 100, 100, 19);

        withdraw.setBackground(new java.awt.Color(255, 255, 255));
        withdraw.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        withdraw.setForeground(new java.awt.Color(95, 145, 64));
        withdraw.setText("Withdraw");
        withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawActionPerformed(evt);
            }
        });
        getContentPane().add(withdraw);
        withdraw.setBounds(300, 430, 140, 30);

        menu.setBackground(new java.awt.Color(255, 255, 255));
        menu.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        menu.setForeground(new java.awt.Color(95, 145, 64));
        menu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menu.setText("Menu");
        menu.setOpaque(true);
        menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuMouseClicked(evt);
            }
        });
        getContentPane().add(menu);
        menu.setBounds(815, 0, 110, 65);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UAS/Image/Login_Header.png"))); // NOI18N
        jLabel7.setOpaque(true);
        jLabel7.setPreferredSize(new java.awt.Dimension(240, 65));
        getContentPane().add(jLabel7);
        jLabel7.setBounds(0, 0, 280, 65);

        jLabel8.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Transaction Record");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(460, 90, 450, 19);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void seeDatabase() {
        Object[] row = {"Deposited By", "Type", "Transaction ID", "From", "To", "Amount", "Estimate"};
        tabmode = new DefaultTableModel(null, row);
        tables.setModel(tabmode);
        tables.setBackground(Color.WHITE);
        try {
            result = aa.seeData();
            while (result.next()) {
                aa.setDepositedBy(result.getString("deposited_by"));
                aa.setType(result.getString("crypto_type"));
                aa.setTransactionID(result.getString("id"));
                aa.setReceiveFrom(result.getString("received_from"));
                aa.setSendTo(result.getString("send_to"));
                aa.setAmount(result.getString("amount"));
                aa.setEstimate(result.getString("estimate"));
                String[] data = {aa.getDepositedBy(), aa.getType(), aa.getTransactionID(), aa.getReceiveFrom(), aa.getSendTo(), aa.getAmount(), aa.getEstimate()};
                tabmode.addRow(data);
            }
        } catch (Exception e) {
        }
    }

    public void reset_text() {
        txt_id.setText("Generated Automatically");
        from.setText("");
        to.setText("");
        amount.setText("");
        estimate.setText("");
    }

    private void saveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataActionPerformed
        if (from.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Sorry, Data is not Full!");
            from.requestFocus();
        } else if (to.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Sorry, Data is not Full!");
            to.requestFocus();
        } else if (amount.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Sorry, Data is not Full!");
            amount.requestFocus();
        } else if (estimate.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Sorry, Data is not Full!");
            estimate.requestFocus();
        } else {
            try {
                aa.setType(type.getSelectedItem().toString());
                aa.setReceiveFrom(from.getText());
                aa.setSendTo(to.getText());
                aa.setAmount(amount.getText());
                aa.setEstimate(estimate.getText());
                aa.saveData(cc.getUserID(), aa.getType(), aa.getReceiveFrom(), aa.getSendTo(), aa.getAmount(), aa.getEstimate());
                JOptionPane.showMessageDialog(null, "Data Saved", "Information",
                        JOptionPane.INFORMATION_MESSAGE);
                seeDatabase();
                reset_text();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid Data", "Information",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveDataActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        if (type.getSelectedItem().equals("Bitcoin")) {
            to.setText("");
            setBTCWallet();
        } else if (type.getSelectedItem().equals("Ethereum")) {
            to.setText("");
            setETHWallet();
        } else if (type.getSelectedItem().equals("Bitcoin Cash")) {
            to.setText("");
            setBCHWallet();
        } else if (type.getSelectedItem().equals("Ripple")) {
            to.setText("");
            setXRPWallet();
        } else if (type.getSelectedItem().equals("Dashcoin")) {
            to.setText("");
            setDASHWallet();
        } else if (type.getSelectedItem().equals("Litecoin")) {
            to.setText("");
            setLTCWallet();
        } else {
            JOptionPane.showMessageDialog(null, "Please Fill One of Crypto Type");
        }
    }//GEN-LAST:event_typeActionPerformed

    private void resetTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTextActionPerformed
        reset_text();
    }//GEN-LAST:event_resetTextActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are You Sure to Logout?", "Warning", 2)
                == JOptionPane.YES_OPTION) {
            bb.logout();
            System.exit(0);
        }
    }//GEN-LAST:event_logoutActionPerformed

    private void estimateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_estimateKeyReleased

    }//GEN-LAST:event_estimateKeyReleased

    private void amountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountKeyReleased
        valueOfAmount = Double.parseDouble(amount.getText());
        if (type.getSelectedItem() == "Bitcoin") {
            valueOfEstimate = valueOfAmount * 100000000;
            estimate.setText(String.valueOf(valueOfEstimate));
        } else if (type.getSelectedItem() == "Ethereum") {
            valueOfEstimate = valueOfAmount * 2000000;
            estimate.setText(String.valueOf(valueOfEstimate));
        } else if (type.getSelectedItem() == "Ripple") {
            valueOfEstimate = valueOfAmount * 4500;
            estimate.setText(String.valueOf(valueOfEstimate));
        } else if (type.getSelectedItem() == "Bitcoin Cash") {
            valueOfEstimate = valueOfAmount * 1500000;
            estimate.setText(String.valueOf(valueOfEstimate));
        } else if (type.getSelectedItem() == "Dashcoin") {
            valueOfEstimate = valueOfAmount * 1700000;
            estimate.setText(String.valueOf(valueOfEstimate));
        } else if (type.getSelectedItem() == "Litecoin") {
            valueOfEstimate = valueOfAmount * 1300000;
            estimate.setText(String.valueOf(valueOfEstimate));
        }
    }//GEN-LAST:event_amountKeyReleased

    private void tablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablesMouseClicked
        try {
            int row = tables.rowAtPoint(evt.getPoint());
            String cryptoType = tables.getValueAt(row, 1).toString();
            String transactionID = tables.getValueAt(row, 2).toString();
            String receivedFrom = tables.getValueAt(row, 3).toString();
            String sendTo = tables.getValueAt(row, 4).toString();
            String totalAmount = tables.getValueAt(row, 5).toString();
            String totalEstimate = tables.getValueAt(row, 6).toString();
            txt_id.setText(String.valueOf(transactionID));
            type.getEditor().setItem(cryptoType);
            from.setText(String.valueOf(receivedFrom));
            to.setText(String.valueOf(sendTo));
            amount.setText(String.valueOf(totalAmount));
            estimate.setText(String.valueOf(totalEstimate));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_tablesMouseClicked

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
        if (type.getSelectedItem().equals("Ethereum")) {
            if (JOptionPane.showConfirmDialog(null, "Generate or Update Wallet?", "Warning", 2)
                    == JOptionPane.YES_OPTION) {
                aa.saveWalletETH(Session.getUserID());
                aa.seeUpdatedWallet(Session.getUserID());
                to.setText("");
                setETHWallet();
            }
        } else if (type.getSelectedItem().equals("Bitcoin")) {
            if (JOptionPane.showConfirmDialog(null, "Generate or Update Wallet?", "Warning", 2)
                    == JOptionPane.YES_OPTION) {
                aa.saveWalletBTC(Session.getUserID());
                aa.seeUpdatedWallet(Session.getUserID());
                to.setText("");
                setBTCWallet();
            }
        } else if (type.getSelectedItem().equals("Ripple")) {
            if (JOptionPane.showConfirmDialog(null, "Generate or Update Wallet?", "Warning", 2)
                    == JOptionPane.YES_OPTION) {
                aa.saveWalletXRP(Session.getUserID());
                aa.seeUpdatedWallet(Session.getUserID());
                to.setText("");
                setXRPWallet();
            }
        } else if (type.getSelectedItem().equals("Bitcoin Cash")) {
            if (JOptionPane.showConfirmDialog(null, "Generate or Update Wallet?", "Warning", 2)
                    == JOptionPane.YES_OPTION) {
                aa.saveWalletBCH(Session.getUserID());
                aa.seeUpdatedWallet(Session.getUserID());
                to.setText("");
                setBCHWallet();
            }
        } else if (type.getSelectedItem().equals("Dashcoin")) {
            if (JOptionPane.showConfirmDialog(null, "Generate or Update Wallet?", "Warning", 2)
                    == JOptionPane.YES_OPTION) {
                aa.saveWalletDASH(Session.getUserID());
                aa.seeUpdatedWallet(Session.getUserID());
                to.setText("");
                setDASHWallet();
            }
        } else if (type.getSelectedItem().equals("Litecoin")) {
            if (JOptionPane.showConfirmDialog(null, "Generate or Update Wallet?", "Warning", 2)
                    == JOptionPane.YES_OPTION) {
                aa.saveWalletLTC(Session.getUserID());
                aa.seeUpdatedWallet(Session.getUserID());
                to.setText("");
                setLTCWallet();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Choose Wallet");
        }
    }//GEN-LAST:event_generateActionPerformed

    private void toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toActionPerformed

    }//GEN-LAST:event_toActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (txt_id.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Sorry, Please Fill Transaction ID Correctly!");
            txt_id.requestFocus();
        } else {
            if (JOptionPane.showConfirmDialog(null, "Are You Sure Delete This Transaction History?", "  Warning", 2) == JOptionPane.YES_OPTION) {
                try {
                    aa.setTransactionID(txt_id.getText());
                    aa.deleteHistory(aa.getTransactionID());
                    JOptionPane.showMessageDialog(null, "Transaction History Deleted", "Information",
                            JOptionPane.INFORMATION_MESSAGE);
                    seeDatabase();
                    reset_text();
                    txt_id.setText("Generated Automatically");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Transaction History Can't Deleted", "Information",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void withdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawActionPerformed
        dispose();
        Withdrawal_Form.preview();
    }//GEN-LAST:event_withdrawActionPerformed

    private void menuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuMouseClicked
        dispose();
        Menu.preview();
    }//GEN-LAST:event_menuMouseClicked

    public static void preview() {
        Deposit_Form form = new Deposit_Form();
        form.setLocationRelativeTo(null);
        form.getContentPane().setBackground(Color.decode("#5f9140"));
        form.openDeposit();
        form.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            preview();
        } catch (Exception e) {

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Name;
    private javax.swing.JTextField amount;
    private javax.swing.JButton delete;
    private javax.swing.JTextField estimate;
    private javax.swing.JTextField from;
    private javax.swing.JButton generate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logout;
    private javax.swing.JLabel menu;
    private javax.swing.JButton resetText;
    private javax.swing.JButton saveData;
    private javax.swing.JTable tables;
    private javax.swing.JTextField to;
    private javax.swing.JTextField txt_id;
    private javax.swing.JComboBox<String> type;
    private javax.swing.JButton withdraw;
    // End of variables declaration//GEN-END:variables

}
